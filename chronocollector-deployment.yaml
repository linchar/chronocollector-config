apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: chronocollector
  name: chronocollector-deployment
  namespace: chronosphere
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: chronocollector
  name: chronocollector-deployment
rules:
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - pods
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes/metrics
    verbs:
      - get
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: chronocollector
  name: chronocollector-deployment
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chronocollector-deployment
subjects:
  - kind: ServiceAccount
    name: chronocollector-deployment
    namespace: chronosphere
---
apiVersion: v1
data:
  config.yml: |
    logging:
      level: ${LOGGING_LEVEL:info}

    metrics:
      scope:
        prefix: "chronocollector"
      prometheus:
        handlerPath: /metrics
      sanitization: prometheus-relaxed
      samplingRate: 1.0
      extended: none

    listenAddress: "${LISTEN_ADDRESS:0.0.0.0:3030}"

    labels:
      defaults:
        tenant_k8s_cluster: ${KUBERNETES_CLUSTER_NAME:""}

    backend:
      type: ${BACKEND_TYPE:gateway}
      gateway:
        address: ${GATEWAY_ADDRESS:""}
        insecure: ${GATEWAY_INSECURE:false}
        cert: ${GATEWAY_CERT:""}
        certSkipVerify: ${GATEWAY_CERT_SKIP_VERIFY:false}

    kubernetes:
      client:
        outOfCluster: ${KUBERNETES_CLIENT_OUT_OF_CLUSTER:false}
      processor:
        annotationsPrefix: ${KUBERNETES_PROCESSOR_ANNOTATIONS_PREFIX:"prometheus.io/"}

    discovery:
      kubernetes:
        enabled: true
        serviceMonitorsEnabled: true
        endpointsDiscoveryEnabled: true
        kubeSystemEndpointsDiscoveryEnabled: false
        podMatchingStrategy: service_monitors_only # we only want to discover using service monitors

      prometheus:
        enabled: true
        scrape_configs:
        - job_name: chronocollector
          static_configs:
          - targets:
            - localhost:3030
          relabel_configs:
          - target_label: instance
            replacement: ${KUBERNETES_POD_NAME:""}
            action: replace
    scrape:
      defaults:
        scrapeInterval: "60s"
        scrapeTimeout: "60s"

    serviceMonitor:
      # Set to true  to scrape every endpoint in the cluster, or cause duplicate scrapes.
      # Setting to false will only work if the deployment and KSM are running on the same node in the cluster
      allowSkipPodInfo: true
      serviceMonitorSelector:
        matchAll: false
        matchExpressions:
          - label: app.kubernetes.io/name
            operator: In
            values:
              - kube-state-metrics
kind: ConfigMap
metadata:
  labels:
    app: chronocollector
  name: chronocollector-config
  namespace: chronosphere
# ---
# apiVersion: v1
# data:
#   address: <add-base64-encoded-token-here>
#   api-token: <add-base64-encoded-token-here>
# kind: Secret
# metadata:
#   labels:
#     app: chronocollector
#   name: chronosphere-secret
#   namespace: chronosphere
# type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: chronocollector
  name: chronocollector-deployment
  namespace: chronosphere
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chronocollector
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "3030"
        prometheus.io/scrape: "true"
      labels:
        app: chronocollector
    spec:
      containers:
        - env:
            - name: LISTEN_ADDRESS
              value: 0.0.0.0:3030
            - name: GATEWAY_ADDRESS
              valueFrom:
                secretKeyRef:
                  key: address
                  name: chronosphere-secret
            - name: LOGGING_LEVEL
              value: info
            - name: API_TOKEN
              valueFrom:
                secretKeyRef:
                  key: api-token
                  name: chronosphere-secret
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KUBERNETES_CLUSTER_NAME
              value: default
            - name: KUBERNETES_KUBELET_MONITORING_ENABLED
              value: "false"
          image: gcr.io/chronosphereio/chronocollector:v0.113.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: chronocollector-deployment
          ports:
            - containerPort: 3030
              name: http
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 1000m
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/chronocollector
              name: chronocollector-config
      serviceAccountName: chronocollector-deployment
      terminationGracePeriodSeconds: 5
      tolerations:
        - operator: Exists
      volumes:
        - configMap:
            name: chronocollector-config
          name: chronocollector-config
